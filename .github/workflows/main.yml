name: BuildAndRunStuff

on:
  pull_request:
  push:
    branches: [ 'main', 'beta' ]

  workflow_dispatch:
    inputs:
      extra_flags:
        description: "Extra flags to pass to bazel"
        default: ''
        required: false

jobs:
  build-with-bazel:
    name: ${{matrix.cfg.name}}

    runs-on: ${{matrix.cfg.os}}

    strategy:
      matrix:
        cfg:
          - { name: 'Linux GCC', os: 'ubuntu-20.04', cc: 'gcc', flags: }
          - { name: 'Linux LLVM/libstdc++', os: 'ubuntu-20.04', cc: 'clang', flags: }
          - { name: 'Linux LLVM/libc++', os: 'ubuntu-20.04', cc: 'clang', flags: '--config=libc++' }
          - { name: 'MacOS GCC', os: 'macos-10.15', cc: 'gcc-10', flags: }
          - { name: 'MacOS LLVM/libc++', os: 'macos-10.15', cc: 'clang', flags: }

    env:
      CC: ${{matrix.cfg.cc}}
      BAZEL_USE_CPP_ONLY_TOOLCHAIN: 1

    steps:
      - uses: actions/checkout@v2

      - name: Install infrastructure (Linux)
        if: matrix.cfg.os == 'ubuntu-20.04'
        run: sudo ln -s /usr/lib/llvm-10/include/c++/v1 /usr/include/c++/v1

      - name: build
        run: bazel build                     -c opt --dynamic_mode=off ${{matrix.cfg.flags}} ${{github.event.inputs.extra_flags}} //...

      - name: test
        run: bazel test --test_output=errors -c opt --dynamic_mode=off ${{matrix.cfg.flags}} ${{github.event.inputs.extra_flags}} //...

      - name: run (Linux)
        if: matrix.cfg.os == 'ubuntu-20.04'
        run: |
          ldd bazel-bin/sandbox/show_args bazel-bin/sandbox/dso_loader bazel-bin/sandbox/dso_test bazel-bin/sandbox/dso_demo.so
          bazel-bin/sandbox/show_args foo bar quz
          bazel-bin/sandbox/dso_loader bazel-bin/sandbox/dso_demo.so

      - name: run (MacOS)
        if: matrix.cfg.os == 'macos-10.15'
        run: |
          otool -L -H bazel-bin/sandbox/show_args bazel-bin/sandbox/dso_loader bazel-bin/sandbox/dso_test bazel-bin/sandbox/dso_demo.so
          bazel-bin/sandbox/show_args foo bar quz
          bazel-bin/sandbox/dso_loader bazel-bin/sandbox/dso_demo.so
